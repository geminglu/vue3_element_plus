image: node:16.19.0

cache:
  key:
    files:
        - package-lock.json
        - yarn.lock
  paths:
    - node_modules/

variables:
  CONTAINER_NAME: "InsightCloud"
  IMAGE_NAME: "insight-cloud-image"

stages:
  - install
  - lint
  - build
  - build_docker
  - deploy

install:
  stage: install
  tags:
    - build
  only:
    - master
  script:
    - npm i -g yarn --force
    - yarn

lint:
  stage: lint
  tags:
    - build
  only:
    - master
  script:
    - npm run lint

build:
  stage: build
  only:
    - master
  tags:
    - build
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - dist
  script:
    - yarn build
  except:
    - dist

build_docker:
  stage: build_docker
  image: docker
  only:
    - master
  tags:
    - build
  script:
  # build会自动读取根目录下的 Dockerfile 文件
    - docker build -t $IMAGE_NAME .

deploy:
  only:
    - master
  stage: deploy
  image: docker
  environment:
    name: test
    url: http://localhost/
  tags:
    - build
  script:
    # 先查找是否有正在运行的容器，如果有就停止并删除
    - if [ $(docker ps -aq --filter name=$CONTAINER_NAME) ];
        then
          docker stop $CONTAINER_NAME;
          docker rm -f $CONTAINER_NAME;fi
          #使用自定义的镜像包启动一个nginx容器
    - docker run -d -p 80:80 --name $CONTAINER_NAME $IMAGE_NAME
